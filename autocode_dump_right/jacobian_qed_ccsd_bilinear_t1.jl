let
    func = FortranFunction(("rho_vo", ["v", "o"]))
    cγ = ("cs", true)
    d_vo = ("d_vo", true)
    cs_vo = ("cs_vo", true)
    d_oo = ("d_oo", true)
    d_vv = ("d_vv", true)
    ct_vo = ("ct_vo", true)
    γ₁ = ("wf%s0", false)
    cv_vovo = ("cv_vovo", true, [[1, 2, 3, 4], [3, 4, 1, 2]])
    d_ov = ("d_ov", true)
    s_vo = ("wf%s1", false)
    cu_vovo = ("cu_vovo", true, [[1, 2, 3, 4], [3, 4, 1, 2]])
    u_vovo = ("wf%u_aibj", false, [[1, 2, 3, 4], [3, 4, 1, 2]])
    update_code!(func, ein",ai->ai", 1//1, [cγ, d_vo])
    update_code!(func, ein"ai,jj->ai", 2//1, [cs_vo, d_oo])
    update_code!(func, ein"aj,ji->ai", -1//1, [cs_vo, d_oo])
    update_code!(func, ein"bi,ab->ai", 1//1, [cs_vo, d_vv])
    update_code!(func, ein"aj,ji,->ai", -1//1, [ct_vo, d_oo, γ₁])
    update_code!(func, ein"bi,ab,->ai", 1//1, [ct_vo, d_vv, γ₁])
    update_code!(func, ein"aibj,jb->ai", 1//1, [cv_vovo, d_ov])
    update_code!(func, ein"aj,jb,bi->ai", -1//1, [ct_vo, d_ov, s_vo])
    update_code!(func, ein"bi,jb,aj->ai", -1//1, [ct_vo, d_ov, s_vo])
    update_code!(func, ein"bj,jb,ai->ai", 2//1, [ct_vo, d_ov, s_vo])
    update_code!(func, ein"aibj,jb,->ai", 1//1, [cu_vovo, d_ov, γ₁])
    update_code!(func, ein",jb,aibj->ai", 1//1, [cγ, d_ov, u_vovo])
    finalize_eT_function(func, "jacobian_qed_ccsd_bilinear_t1", "qed_ccsd")
end

